#!/bin/bash

# TODO:
# - [x] Produce minimal product
# - [ ] Add tarball caching for bad network speeds, as an option
# - [ ] Fix destdir error
# - [ ] Add support for wireless
# - [ ] Hostname directly to kernel
# - [ ] Add nano as a better editor
# - [ ] Quantum support
# - [ ] Wayland + SwayWM

# TODO: Add better colors here
case $1 in
    "check")
        if mount | grep /mnt/semcos > /dev/null; then
            echo "/mnt/semcos is mounted"
        else
            echo -e "\e[43mwarning\e[0m: /mnt/semcos is not mounted"
        fi

        # check for host dependencies here

        echo -e "Check complete."
        exit 0
esac

# Turn on some environment configurations, which will save us
# in the future
# TODO: add feature to toggle set flags
set +h -u -e
umask 022
export LC_ALL=POSIX

# Force to run as root
if [[ `id -u` -ne 0 ]] ; then echo "Run this script as root." ; sleep 5 ; fi

THREADS=${THREADS:-$( expr $(nproc) - 1 ) }

function semcmake() {
    make -j${THREADS}
}

export INSTALLER_DIR=`pwd`
echo "Currently in " $INSTALLER_DIR

# TODO: cleaner result
export SEMCOS_DESTDIR=$DEST
mkdir $SEMCOS_DESTDIR || echo "/mnt/semcos already found, continuing to wipe"

sleep 10
rm -rf /mnt/semcos/*

export PATH=${SEMCOS_DESTDIR}/cross-tools/bin:/bin:/usr/bin

# Create the directory structure, which is specified by the Linux Foundation
# at http://refspecs.linuxfoundation.org/fhs.shtml
mkdir -pv ${SEMCOS_DESTDIR}/{bin,boot{,/grub},dev,{etc/,}opt,home,lib/{firmware,modules},lib64,mnt}
mkdir -pv ${SEMCOS_DESTDIR}/{proc,media/{floppy,cdrom},sbin,srv,sys}
mkdir -pv ${SEMCOS_DESTDIR}/var/{lock,log,mail,run,spool}
mkdir -pv ${SEMCOS_DESTDIR}/var/{opt,cache,lib/{misc,locate},local}
install -dv -m 0750 ${SEMCOS_DESTDIR}/root
install -dv -m 1777 ${SEMCOS_DESTDIR}{/var,}/tmp
install -dv ${SEMCOS_DESTDIR}/etc/init.d
mkdir -pv ${SEMCOS_DESTDIR}/usr/{,local/}{bin,include,lib{,64},sbin,src}
mkdir -pv ${SEMCOS_DESTDIR}/usr/{,local/}share/{doc,info,locale,man}
mkdir -pv ${SEMCOS_DESTDIR}/usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -pv ${SEMCOS_DESTDIR}/usr/{,local/}share/man/man{1,2,3,4,5,6,7,8}
for dir in ${SEMCOS_DESTDIR}/usr{,/local}; do
    ln -sv share/{man,doc,info} ${dir}
done

# Install and link some files
install -dv ${SEMCOS_DESTDIR}/cross-tools{,/bin}
ln -svf ../proc/mounts ${SEMCOS_DESTDIR}/etc/mtab

# Create the /etc/passwd file
cat > ${SEMCOS_DESTDIR}/etc/passwd << "EOF"
root::0:0:root:/root:/bin/sh
EOF

# Create the /etc/group file
cat > ${SEMCOS_DESTDIR}/etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
daemon:x:6:
disk:x:8:
dialout:x:10:
video:x:12:
utmp:x:13:
usb:x:14:
EOF

# Create the /etc/fstab
cat > ${SEMCOS_DESTDIR}/etc/fstab << "EOF"
# file system  mount-point  type   options          dump  fsck
#                                                         order

rootfs          /               auto    defaults        1      1
proc            /proc           proc    defaults        0      0
sysfs           /sys            sysfs   defaults        0      0
devpts          /dev/pts        devpts  gid=4,mode=620  0      0
tmpfs           /dev/shm        tmpfs   defaults        0      0
EOF

# Create the /etc/profile
cat > ${SEMCOS_DESTDIR}/etc/profile << "EOF"
export PATH=/bin:/usr/bin:/usr/local/bin

if [ `id -u` -eq 0 ] ; then
        PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin
        unset HISTFILE
fi

# Set up some environment variables.
export USER=`id -un`
export LOGNAME=$USER
export HOSTNAME=`/bin/hostname`
export HISTSIZE=1000
export HISTFILESIZE=1000
export PAGER='/bin/more '
export EDITOR='/bin/vi'

alias q=quantum
alias m=man
alias s=halt
EOF

# Specify our hostname
echo "semc" > ${SEMCOS_DESTDIR}/etc/hostname

# Create the /etc/issue file
cat > ${SEMCOS_DESTDIR}/etc/issue<< "EOF"
SEMC OS 0.0.5-alpha. Putting the I/O in Io.
Kernel \r \m

EOF

# Create the /etc/inittab file
cat > ${SEMCOS_DESTDIR}/etc/inittab<< "EOF"
::sysinit:/etc/rc.d/startup

tty1::respawn:/sbin/getty 38400 tty1
tty2::respawn:/sbin/getty 38400 tty2
tty3::respawn:/sbin/getty 38400 tty3
tty4::respawn:/sbin/getty 38400 tty4
tty5::respawn:/sbin/getty 38400 tty5
tty6::respawn:/sbin/getty 38400 tty6

::shutdown:/etc/rc.d/shutdown
::ctrlaltdel:/sbin/reboot
EOF

# Create the mdev file
cat > ${SEMCOS_DESTDIR}/etc/mdev.conf<< "EOF"
# Devices:
# Syntax: %s %d:%d %s
# devices user:group mode

# null does already exist; therefore ownership has to
# be changed with command
null    root:root 0666  @chmod 666 $MDEV
zero    root:root 0666
grsec   root:root 0660
full    root:root 0666

random  root:root 0666
urandom root:root 0444
hwrandom root:root 0660

# console does already exist; therefore ownership has to
# be changed with command
console root:tty 0600 @mkdir -pm 755 fd && cd fd && for x in 0 1 2 3 ; do ln -sf /proc/self/fd/$x $x; done

kmem    root:root 0640
mem     root:root 0640
port    root:root 0640
ptmx    root:tty 0666

# ram.*
ram([0-9]*)     root:disk 0660 >rd/%1
loop([0-9]+)    root:disk 0660 >loop/%1
sd[a-z].*       root:disk 0660
hd[a-z][0-9]*   root:disk 0660

tty             root:tty 0666
tty[0-9]        root:root 0600
tty[0-9][0-9]   root:tty 0660
ttyO[0-9]*      root:tty 0660
pty.*           root:tty 0660
vcs[0-9]*       root:tty 0660
vcsa[0-9]*      root:tty 0660

ttyLTM[0-9]     root:dialout 0660 @ln -sf $MDEV modem
ttySHSF[0-9]    root:dialout 0660 @ln -sf $MDEV modem
slamr           root:dialout 0660 @ln -sf $MDEV slamr0
slusb           root:dialout 0660 @ln -sf $MDEV slusb0
fuse            root:root  0666

# misc stuff
agpgart         root:root 0660  >misc/
psaux           root:root 0660  >misc/
rtc             root:root 0664  >misc/

# input stuff
event[0-9]+     root:root 0640 =input/
ts[0-9]         root:root 0600 =input/

# v4l stuff
vbi[0-9]        root:video 0660 >v4l/
video[0-9]      root:video 0660 >v4l/

# load drivers for usb devices
usbdev[0-9].[0-9]       root:root 0660 */lib/mdev/usbdev
usbdev[0-9].[0-9]_.*    root:root 0660
EOF

cat > ${SEMCOS_DESTDIR}/boot/grub/grub.cfg<< "EOF"

set default=0
set timeout=5

set root=(hd0,1)

menuentry "SEMC OS" {
        linux   /boot/vmlinuz-5.4.77 root=/dev/sda1 ro quiet
}
EOF

# Finally, create and assign the proper log files and permissions
touch ${SEMCOS_DESTDIR}/var/run/utmp ${SEMCOS_DESTDIR}/var/log/{btmp,lastlog,wtmp}
chmod -v 664 ${SEMCOS_DESTDIR}/var/run/utmp ${SEMCOS_DESTDIR}/var/log/lastlog

# Now, unset our gcc variables just in case
unset CFLAGS
unset CXXFLAGS

# Specify some environment variables we'll be using
# throughout the install
export SEMCOS_HOST=$(echo ${MACHTYPE} | sed "s/-[^-]*/-cross/")
export SEMCOS_TARGET=x86_64-unknown-linux-gnu
export SEMCOS_CPU=k8
export SEMCOS_ARCH=$(echo ${SEMCOS_TARGET} | sed -e 's/-.*//' -e 's/i.86/i386/')
export SEMCOS_ENDIAN=little

# Now, create our builds directory and enter it
mkdir ${SEMCOS_DESTDIR}/builds
cd ${SEMCOS_DESTDIR}/builds

# ------------------------- LINUX KERNEL HEADERS --------------------------
# Yes, I'm using those fancy pantsy weird comment seperation thingies,
# have a problem bud?

wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.77.tar.xz
tar xvf linux*
cd linux*/
make mrproper
make ARCH=${SEMCOS_ARCH} headers_check && make ARCH=${SEMCOS_ARCH} INSTALL_HDR_PATH=dest headers_install
cp -rv dest/include/* ${SEMCOS_DESTDIR}/usr/include

cd ${SEMCOS_DESTDIR}/builds

# --------------------------- GNU BINUTILS ------------------------------
wget https://ftp.gnu.org/gnu/binutils/binutils-2.35.1.tar.xz
tar xvf binutils*
mkdir binutils-build
cd binutils-build/
../binutils*/configure --prefix=${SEMCOS_DESTDIR}/cross-tools \
--target=${SEMCOS_TARGET} --with-sysroot=${SEMCOS_DESTDIR} \
--disable-nls --enable-shared --disable-multilib
make configure-host && semcmake
ln -sv lib ${SEMCOS_DESTDIR}/cross-tools/lib64
make install
cp -v ../binutils*/include/libiberty.h ${SEMCOS_DESTDIR}/usr/include

cd ${SEMCOS_DESTDIR}/builds

# ------------------------- STATIC GCC ---------------------------

wget https://bigsearcher.com/mirrors/gcc/releases/gcc-10.2.0/gcc-10.2.0.tar.gz
tar xvf gcc*
wget https://gmplib.org/download/gmp/gmp-6.2.0.tar.xz
tar xvf gmp*
wget https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.xz
tar xvf mpfr*
wget https://ftp.gnu.org/gnu/mpc/mpc-1.2.0.tar.gz
tar xvf mpc*

# TODO: instead of using `gcc-10.2.0`, use `gcc*`. Currently doesn't work
# because a) mv wants to move to the literal `*` character, and b) my brain
# doesn't work
mv ${SEMCOS_DESTDIR}/builds/gmp*/ ${SEMCOS_DESTDIR}/builds/gcc-10.2.0/gmp
mv ${SEMCOS_DESTDIR}/builds/mpfr*/ ${SEMCOS_DESTDIR}/builds/gcc-10.2.0/mpfr
mv ${SEMCOS_DESTDIR}/builds/mpc*/ ${SEMCOS_DESTDIR}/builds/gcc-10.2.0/mpc

mkdir gcc-static
cd gcc-static

AR=ar LDFLAGS="-Wl,-rpath,${SEMCOS_DESTDIR}/cross-tools/lib" \
../gcc*/configure --prefix=${SEMCOS_DESTDIR}/cross-tools \
--build=${SEMCOS_HOST} --host=${SEMCOS_HOST} \
--target=${SEMCOS_TARGET} \
--with-sysroot=${SEMCOS_DESTDIR}/target --disable-nls \
--disable-shared \
--with-mpfr-include=$(pwd)/../gcc*/mpfr/src \
--with-mpfr-lib=$(pwd)/mpfr/src/.libs \
--without-headers --with-newlib --disable-decimal-float \
--disable-libgomp --disable-libmudflap --disable-libssp \
--disable-threads --enable-languages=c,c++ \
--disable-multilib --with-arch=${SEMCOS_CPU}

make all-gcc all-target-libgcc && \
make install-gcc install-target-libgcc

ln -vs libgcc.a `${SEMCOS_TARGET}-gcc -print-libgcc-file-name | sed 's/libgcc/&_eh/'`

cd ${SEMCOS_DESTDIR}/builds

# ------------------ GLIBC ---------------------
wget https://ftp.gnu.org/gnu/libc/glibc-2.32.tar.xz
tar xvf glibc*

mkdir glibc-build
cd glibc-build/

echo "libc_cv_forced_unwind=yes" > config.cache
echo "libc_cv_c_cleanup=yes" >> config.cache
echo "libc_cv_ssp=no" >> config.cache
echo "libc_cv_ssp_strong=no" >> config.cache

BUILD_CC="gcc" CC="${SEMCOS_TARGET}-gcc" \
AR="${SEMCOS_TARGET}-ar" \
RANLIB="${SEMCOS_TARGET}-ranlib" CFLAGS="-O2" \
../glibc*/configure --prefix=/usr \
--host=${SEMCOS_TARGET} --build=${SEMCOS_HOST} \
--disable-profile --enable-add-ons --with-tls \
--enable-kernel=2.6.32 --with-__thread \
--with-binutils=${SEMCOS_DESTDIR}/cross-tools/bin \
--with-headers=${SEMCOS_DESTDIR}/usr/include \
--cache-file=config.cache
semcmake && make install_root=${SEMCOS_DESTDIR}/ install

cd ${SEMCOS_DESTDIR}/builds

# ------------------ GCC FINAL -------------------
mkdir gcc-build
cd gcc-build/

AR=ar LDFLAGS="-Wl,-rpath,${SEMCOS_DESTDIR}/cross-tools/lib" \
../gcc*/configure --prefix=${SEMCOS_DESTDIR}/cross-tools \
--build=${SEMCOS_HOST} --target=${SEMCOS_TARGET} \
--host=${SEMCOS_HOST} --with-sysroot=${SEMCOS_DESTDIR} \
--disable-nls --enable-shared \
--enable-languages=c,c++,go,fortran --enable-c99 \
--enable-long-long \
--with-mpfr-include=$(pwd)/../gcc*/mpfr/src \
--with-mpfr-lib=$(pwd)/mpfr/src/.libs \
--disable-multilib --with-arch=${SEMCOS_CPU}

semcmake && make install

cp -v ${SEMCOS_DESTDIR}/cross-tools/${SEMCOS_TARGET}/lib64/libgcc_s.so.1 ${SEMCOS_DESTDIR}/lib64

cd ${SEMCOS_DESTDIR}/builds

# ----------------- CROSS COMPILER COMPLETE -----------------

# Let's set our new x-compiler flags
export CC="${SEMCOS_TARGET}-gcc"
export CXX="${SEMCOS_TARGET}-g++"
export CPP="${SEMCOS_TARGET}-gcc -E"
export AR="${SEMCOS_TARGET}-ar"
export AS="${SEMCOS_TARGET}-as"
export LD="${SEMCOS_TARGET}-ld"
export RANLIB="${SEMCOS_TARGET}-ranlib"
export READELF="${SEMCOS_TARGET}-readelf"
export STRIP="${SEMCOS_TARGET}-strip"

# --------------- NATIVE GCC ---------------

# BUG: mention mpfr and co. to this build so that it
# knows where they are and that it can use them.

# TODO: set this to binutils* so that we don't have to
# change for every version, currently does not work as
# there is binutils-build as well as binutils-2.35.1
cd binutils-2.35.1/
mkdir -v ../binutils-build-native
cd ../binutils-build-native

AR=ar AS=as ../binutils*/configure --prefix=/usr \
    --build=${SEMCOS_HOST} --host=${SEMCOS_TARGET} \
    --target=${SEMCOS_TARGET} --enable-shared

make configure-host
semcmake tooldir=/usr
make DESTDIR=${SEMCOS_DESTDIR} tooldir=/usr install

cd ${SEMCOS_DESTDIR}/builds

# TODO: set this to enter the directory with *
cd gcc-10.2.0/
cp libiberty/Makefile.in{,.orig}
sed 's/install_to_$(SEMCOS_DESTDIR) //' libiberty/Makefile.in.orig > \
    libiberty/Makefile.in
# cp gcc/gccbug.in{,.orig}
# sed 's/@have_mktemp_command@/yes/' gcc/gccbug.in.orig > gcc/gccbug.in
cp gcc/Makefile.in{,.orig}
sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig > gcc/Makefile.in
mkdir -v ../gcc-build-native
cd ../gcc-build-native

LDFLAGS="-Wl,-rpath-link,${SEMCOS_DESTDIR}/cross-tools/${SEMCOS_TARGET}/lib" \
    ../gcc*/configure --prefix=/usr --libexecdir=/usr/lib \
    --build=${SEMCOS_HOST} --host=${SEMCOS_TARGET} --target=${SEMCOS_TARGET} \
    --enable-shared --enable-threads=posix --enable-__cxa_atexit \
    --enable-c99 --enable-long-long --enable-clocale=gnu \
    --enable-languages=c,c++ --disable-libstdcxx-pch

cp Makefile{,.orig}
sed "/^HOST_\(GMP\|PPL\|CLOOG\)\(LIBS\|INC\)/s:-[IL]/\(lib\|include\)::" \
    Makefile.orig > Makefile
semcmake
make DESTDIR=${SEMCOS_DESTDIR} install
ln -sfv ../usr/bin/cpp ${SEMCOS_DESTDIR}/lib
ln -sfv gcc ${SEMCOS_DESTDIR}/usr/bin/cc

echo -e "\a"

cd ${SEMCOS_DESTDIR}/builds

# ----------- BUSYBOX ------------
wget https://busybox.net/downloads/busybox-1.32.0.tar.bz2
tar xvf busybox*
cd busybox*/

make CROSS_COMPILE="${SEMCOS_TARGET}-" defconfig
make CROSS_COMPILE="${SEMCOS_TARGET}-" menuconfig
make CROSS_COMPILE="${SEMCOS_TARGET}-"
make CROSS_COMPILE="${SEMCOS_TARGET}-" \
CONFIG_PREFIX="${SEMCOS_DESTDIR}" install

# Install extra pl script
cp -v examples/depmod.pl ${SEMCOS_DESTDIR}/cross-tools/bin
chmod 755 ${SEMCOS_DESTDIR}/cross-tools/bin/depmod.pl

cd ${SEMCOS_DESTDIR}/builds

# -------------- KERNEL --------------
cd linux*/

make ARCH=${SEMCOS_ARCH} \
CROSS_COMPILE=${SEMCOS_TARGET}- x86_64_defconfig
make ARCH=${SEMCOS_ARCH} \
CROSS_COMPILE=${SEMCOS_TARGET}- menuconfig
semcmake ARCH=${SEMCOS_ARCH} \
CROSS_COMPILE=${SEMCOS_TARGET}-
make ARCH=${SEMCOS_ARCH} \
CROSS_COMPILE=${SEMCOS_TARGET}- \
INSTALL_MOD_PATH=${SEMCOS_DESTDIR} modules_install

# Throw these into /boot
cp -v arch/x86/boot/bzImage ${SEMCOS_DESTDIR}/boot/vmlinuz-5.4.77
cp -v System.map ${SEMCOS_DESTDIR}/boot/System.map-5.4.77
cp -v .config ${SEMCOS_DESTDIR}/boot/config-5.4.77

# Run previously mentioned perl script
${SEMCOS_DESTDIR}/cross-tools/bin/depmod.pl \
-F ${SEMCOS_DESTDIR}/boot/System.map-5.4.77 \
-b ${SEMCOS_DESTDIR}/lib/modules/5.4.77

cd ${SEMCOS_DESTDIR}/builds

# ----------- BOOTSCRIPTS -------------
wget http://ftp.osuosl.org/pub/clfs/conglomeration/clfs-embedded-bootscripts/clfs-embedded-bootscripts-1.0-pre5.tar.bz2
tar xvf clfs-embedded-bootscripts*.tar.bz2
cd clfs-embedded-bootscripts*/

# Apply clfs patch
patch Makefile ${INSTALLER_DIR}/patches/clfs-embedded-bootscripts-1.0-pre5.patch

make DESTDIR=${SEMCOS_DESTDIR}/ install-bootscripts
ln -sv ../rc.d/startup ${SEMCOS_DESTDIR}/etc/init.d/rcS

cd ${SEMCOS_DESTDIR}/builds

# ---------------- ZLIB -------------------
wget https://zlib.net/fossils/zlib-1.2.11.tar.gz
tar xvf zlib*.tar.gz
cd zlib*/

sed -i 's/-O3/-Os/g' configure
./configure --prefix=/usr --shared
semcmake && make DESTDIR=${SEMCOS_DESTDIR}/ install

mv -v ${SEMCOS_DESTDIR}/usr/lib/libz.so.* ${SEMCOS_DESTDIR}/lib
ln -svf ../../lib/libz.so.1 ${SEMCOS_DESTDIR}/usr/lib/libz.so
ln -svf ../../lib/libz.so.1 ${SEMCOS_DESTDIR}/usr/lib/libz.so.1
ln -svf ../lib/libz.so.1 ${SEMCOS_DESTDIR}/lib64/libz.so.1

cd ${SEMCOS_DESTDIR}/builds

# --------------------- BASH -----------------------
wget https://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz
tar xvf bash*.tar.gz
cd bash*/

./configure
semcmake
make DESTDIR=${SEMCOS_DESTDIR} install

cd ${SEMCOS_DESTDIR}/builds

# ----------------- MAKE --------------------
wget https://ftp.gnu.org/gnu/make/make-4.3.tar.gz
tar xvf make*
cd make*/

./configure
semcmake
make DESTDIR=${SEMCOS_DESTDIR} install

cd ${SEMCOS_DESTDIR}/builds

# ------------ IANA ETC ----------------

wget http://ftp.osuosl.org/pub/lfs/lfs-packages/conglomeration/iana-etc/iana-etc-2.30.tar.bz2
wget http://patches.clfs.org/embedded-dev/iana-etc-2.30-update-2.patch

tar xvf iana*.tar.bz2
cd iana*/
patch -Np1 -i ../iana-etc-2.30-update-2.patch

make get
semcmake STRIP=yes
make DESTDIR=${SEMCOS_DESTDIR} install

cd ${SEMCOS_DESTDIR}/builds

# ------------- SYSSTAT --------------
wget https://github.com/sysstat/sysstat/archive/v12.4.0.tar.gz
mv v12.4.0.tar.gz sysstat-12.4.0.tar.gz
tar xvf sysstat*
cd sysstat*/

./configure --prefix=/usr --enable-documentation
semcmake
make DESTDIR=${SEMCOS_DESTDIR}/ install

cd ${SEMCOS_DESTDIR}/builds

# --------------------- LIBXML2 (dep of wayland) -------------------------
wget http://xmlsoft.org/sources/libxml2-2.9.10.tar.gz
tar xvf libxml*
cd libxml*/

sed -i '/if Py/{s/Py/(Py/;s/)/))/}' python/{types.c,libxml.c}
./configure --prefix=/usr    \
            --disable-static \
            --with-history   \
            --with-python=/usr/bin/python3 &&
semcmake
make DESTDIR=${SEMCOS_DESTDIR}/ install

cd ${SEMCOS_DESTDIR}/builds

# ----------------------- WAYLAND ------------------------
wget https://wayland.freedesktop.org/releases/wayland-1.18.0.tar.xz
tar xvf wayland*
cd wayland*/

./configure --prefix=/usr    \
            --disable-static \
            --disable-documentation &&
semcmake
make DESTDIR=${SEMCOS_DESTDIR}/ install

cd ${SEMCOS_DESTDIR}/builds

# ----------- PACKAGES INTALLATION COMPLETE --------------

mkdir ${SEMCOS_DESTDIR}/etc/network/
cat > ${SEMCOS_DESTDIR}/etc/network/interfaces << "EOF"
auto eth0
iface eth0 inet dhcp
auto wlan0
iface wlan0 inet dhcp
EOF

mkdir -pv ${SEMCOS_DESTDIR}/etc/network/if-{post-{up,down},pre-{up,down},up,down}.d
mkdir -pv ${SEMCOS_DESTDIR}/usr/share/udhcpc

cat > ${SEMCOS_DESTDIR}/etc/network.conf << "EOF"
# Global Networking Configuration
# interface configuration is in /etc/network.d/

INTERFACE="eth0"

# set to yes to enable networking
NETWORKING=yes

# set to yes to set default route to gateway
USE_GATEWAY=no

# set to gateway IP address
GATEWAY=10.0.2.2
EOF

# TODO: Put this in the /etc contents, not in here
cat > ${SEMCOS_DESTDIR}/usr/share/udhcpc/default.script << "EOF"
#!/bin/sh
# udhcpc Interface Configuration
# Based on http://lists.debian.org/debian-boot/2002/11/msg00500.html
# udhcpc script edited by Tim Riker <Tim@Rikers.org>

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

RESOLV_CONF="/etc/resolv.conf"
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"

case "$1" in
    deconfig)
            /sbin/ifconfig $interface 0.0.0.0
            ;;

    renew|bound)
            /sbin/ifconfig $interface $ip $BROADCAST $NETMASK

            if [ -n "$router" ] ; then
                    while route del default gw 0.0.0.0 dev $interface ; do
                            true
                    done

                    for i in $router ; do
                            route add default gw $i dev $interface
                    done
            fi

            echo -n > $RESOLV_CONF
            [ -n "$domain" ] && echo search $domain >> $RESOLV_CONF
            for i in $dns ; do
                    echo nameserver $i >> $RESOLV_CONF
            done
            ;;
esac

exit 0
EOF

chmod +x ${SEMCOS_DESTDIR}/usr/share/udhcpc/default.script

rm -rf ${SEMCOS_DESTDIR}/{cross-tools,builds}

# Touchups time! Strip all debug symbols, keeping the files footprint
# to an absolute minimum
find ${SEMCOS_DESTDIR}/{,usr/}{bin,lib,sbin} -type f -exec strip --strip-debug '{}' ';'
find ${SEMCOS_DESTDIR}/{,usr/}lib64 -type f -exec strip --strip-debug '{}' ';'

# Change file ownerships and create nodes here
chown -R root:root ${SEMCOS_DESTDIR}
chgrp 13 ${SEMCOS_DESTDIR}/var/run/utmp ${SEMCOS_DESTDIR}/var/log/lastlog
mknod -m 0666 ${SEMCOS_DESTDIR}/dev/null c 1 3
mknod -m 0600 ${SEMCOS_DESTDIR}/dev/console c 5 1
chmod 4755 ${SEMCOS_DESTDIR}/bin/busybox

# Unmount
umount $SEMCOS_DESTDIR

echo "Installation complete."
