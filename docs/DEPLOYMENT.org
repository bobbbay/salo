#+TITLE: Deployment
#+STARTUP: inlineimages

** Deployment

Salo offers an incremental deployment suite native to the toolset. This allows users to define remote configurations and deploy with ease.

Deployment in Salo is /incremental/. This means that, during the deployment of an operating system, it will only send the files that have /changed/ - not the whole OS itself. However, Salo also markets itself as stateless - hence, it cannot store a state file of which programs are installed on the remote machine on the local machine. To work around this, Salo makes two requests to remote machines - the first during the apply stage, and the second during the deploy stage.

*** The Apply Stage

Salo's apply stage generally takes three steps:

 - Receive the system Attrset;
 - Send a request to the remote server, asking for a diff of programs;
 - Prints out the diff of programs to the user.

Once Salo knows which files are /already/ on the remote machine, it is able to decide which ones it needs to deploy, which it pipes onto the deploy stage.

*** The Deploy Stage

The deploy stage receives a list of programs it needs to compile, and takes two steps:

- Compile the programs, producing binaries and library files as needed;
- Sends these files via a remote connection to the remote machine.

*** Defining a Remote Configuration

Up until now, it's all been theory. Let's write a configuration that deploys to a remote machine, via ~ssh~.

#+begin_src salo
remote = ssh://ip.address.of.machine -- 1.
packages = with pkgs; [ git ];

{
  packages,
  remote,
}
#+end_src

1. Note that here we use a special type, ~ssh~, to indicate the location of the remote host. This implements the ~Protocol~ type class, which enables scalability for more protocls added in the future.

Running ~salo apply <file>~ will check for a connection with the remote host, and go through each stesp as outlined in [[The apply stage]]. If successful, ~salo deploy <file>~ it will continue to deploy in [[The deploy stage]]. Note that ~salo deploy~ will secretly run ~salo apply~ if not applied already.

Here is a technical outline of remote deployment in Salo:

#+ATTR_ORG: :width 900
[[./remote-diagram.png]]
